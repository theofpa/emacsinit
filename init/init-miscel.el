;;--------------------------------------------------------------------------------------------------------------------------------------------
;; ---- BEGIN POWERLINE ----------------------------------------------------------------------------------------------------------------------
;;--------------------------------------------------------------------------------------------------------------------------------------------

(require 'powerline)
(powerline-center-theme)

;;--------------------------------------------------------------------------------------------------------------------------------------------
;; ---- END POWERLINE ------------------------------------------------------------------------------------------------------------------------
;;--------------------------------------------------------------------------------------------------------------------------------------------


;;--------------------------------------------------------------------------------------------------------------------------------------------
;; ---- BEGIN NEOTREE ------------------------------------------------------------------------------------------------------------------------
;;--------------------------------------------------------------------------------------------------------------------------------------------

(require 'neotree)
(setq neo-smart-open t)
(setq projectile-switch-project-action 'neotree-projectile-action)

;;--------------------------------------------------------------------------------------------------------------------------------------------
;; ---- END NEOTREE --------------------------------------------------------------------------------------------------------------------------
;;--------------------------------------------------------------------------------------------------------------------------------------------


;;--------------------------------------------------------------------------------------------------------------------------------------------
;; ---- BEGIN UNDO-TREE ----------------------------------------------------------------------------------------------------------------------
;;--------------------------------------------------------------------------------------------------------------------------------------------

(require 'undo-tree)
(global-undo-tree-mode)

;;--------------------------------------------------------------------------------------------------------------------------------------------
;; ---- END UNDO-TREE ------------------------------------------------------------------------------------------------------------------------
;;--------------------------------------------------------------------------------------------------------------------------------------------


;;--------------------------------------------------------------------------------------------------------------------------------------------
;; ---- BEGIN BS -----------------------------------------------------------------------------------------------------------------------------
;;--------------------------------------------------------------------------------------------------------------------------------------------

(require 'bs)
(global-set-key "\C-x\C-b" 'bs-show)
(setq bs-default-configuration "targets")

(defun kill-all-dired-buffers()
  "Kill all dired buffers."
  (interactive)
  (save-excursion
    (let((count 0))
      (dolist(buffer (buffer-list))
        (set-buffer buffer)
        (when (equal major-mode 'dired-mode)
          (setq count (1+ count))
          (kill-buffer buffer)))
      (message "Killed %i dired buffer(s)." count ))))
(define-key bs-mode-map (kbd "D D") 'kill-all-dired-buffers)

;;--------------------------------------------------------------------------------------------------------------------------------------------
;; ---- END BS -------------------------------------------------------------------------------------------------------------------------------
;;--------------------------------------------------------------------------------------------------------------------------------------------


;;--------------------------------------------------------------------------------------------------------------------------------------------
;; ---- BEGIN MICPAREN -----------------------------------------------------------------------------------------------------------------------
;;--------------------------------------------------------------------------------------------------------------------------------------------

(paren-activate)

(add-hook 'LaTeX-mode-hook
          (function (lambda ()
                      (paren-toggle-matching-quoted-paren 1)
                      (paren-toggle-matching-paired-delimiter 1))))


(add-hook 'c-mode-common-hook
          (function (lambda ()
                      (paren-toggle-open-paren-context 1))))
;;--------------------------------------------------------------------------------------------------------------------------------------------
;; ---- END MICPAREN -------------------------------------------------------------------------------------------------------------------------
;;--------------------------------------------------------------------------------------------------------------------------------------------


;;--------------------------------------------------------------------------------------------------------------------------------------------
;; ---- BEGIN HIGHLIGHT-PAREN ----------------------------------------------------------------------------------------------------------------
;;--------------------------------------------------------------------------------------------------------------------------------------------

(define-globalized-minor-mode global-highlight-parentheses-mode
  highlight-parentheses-mode
  (lambda ()
    (highlight-parentheses-mode t)))
(global-highlight-parentheses-mode t)

;;--------------------------------------------------------------------------------------------------------------------------------------------
;; ---- END HIGHLIGHT-PAREN ------------------------------------------------------------------------------------------------------------------
;;--------------------------------------------------------------------------------------------------------------------------------------------


;;--------------------------------------------------------------------------------------------------------------------------------------------
;; ---- BEGIN HIGHLIGHT-INDENTATION ----------------------------------------------------------------------------------------------------------
;;--------------------------------------------------------------------------------------------------------------------------------------------

(add-hook 'python-mode-hook 'highlight-indentation-mode)
(add-hook 'tuareg-mode-hook 'highlight-indentation-mode)
(add-hook 'ess-mode-hook 'highlight-indentation-mode)
(add-hook 'c++-mode-hook 'highlight-indentation-mode)

;;--------------------------------------------------------------------------------------------------------------------------------------------
;; ---- END HIGHLIGHT-INDENTATION ------------------------------------------------------------------------------------------------------------
;;--------------------------------------------------------------------------------------------------------------------------------------------


;;--------------------------------------------------------------------------------------------------------------------------------------------
;; ---- BEGIN ELECTRIC-OPERATOR --------------------------------------------------------------------------------------------------------------
;;--------------------------------------------------------------------------------------------------------------------------------------------

(add-hook 'python-mode-hook #'electric-operator-mode)
(add-hook 'py-python-shell-mode-hook #'electric-operator-mode)
(add-hook 'ess-mode-hook #'electric-operator-mode)
(add-hook 'c++-mode-hook #'electric-operator-mode)

;; (defvar electric-operator-rules
;;   '((?= . electric-operator-self-insert-command)
;;     (?< . electric-operator-<)
;;     (?> . electric-operator->)
;;     (?% . electric-operator-%)
;;     (?+ . electric-operator-+)
;;     (?- . electric-operator--)
;;     (?* . electric-operator-*)
;;     (?/ . electric-operator-/)
;;     (?& . electric-operator-&)
;;     (?| . electric-operator-self-insert-command)
;;     (?: . electric-operator-:)
;;     (?? . electric-operator-?)
;;     (?, . electric-operator-\,)
;;     (?~ . electric-operator-~)))

(eval-after-load "electric-operator"
  '(electric-operator-add-rules-for-mode 'python-mode
										 (cons "+" nil)
										 (cons "-" nil)
										 (cons "*" nil)
										 (cons "/" nil)
										 ))

(eval-after-load "electric-operator"
  '(electric-operator-add-rules-for-mode 'c++-mode
										 (cons ":" nil)
										 (cons "+" nil)
										 (cons "-" nil)
										 (cons "*" nil)
										 (cons "/" nil)
										 (cons "<" nil)
										 (cons ">" nil)
										 (cons "&" nil)
										 (cons "++" nil)
										 (cons ">>" nil)
										 (cons "--" nil)))

(eval-after-load "electric-operator"
  '(electric-operator-add-rules-for-mode 'ess-mode
										 (cons "+" nil)
										 (cons "-" nil)
										 (cons "*" nil)
										 (cons "/" nil)
										 (cons "<" nil)
										 (cons "^" nil)
										 (cons "," ", ")
										 ))

;;--------------------------------------------------------------------------------------------------------------------------------------------
;; ---- END ELECTRIC-OPERATOR ----------------------------------------------------------------------------------------------------------------
;;--------------------------------------------------------------------------------------------------------------------------------------------


;;--------------------------------------------------------------------------------------------------------------------------------------------
;; ---- BEGIN WHICH-KEY ----------------------------------------------------------------------------------------------------------------------
;;--------------------------------------------------------------------------------------------------------------------------------------------

(which-key-setup-side-window-right)

;;--------------------------------------------------------------------------------------------------------------------------------------------
;; ---- END WHICH-KEY ------------------------------------------------------------------------------------------------------------------------
;;--------------------------------------------------------------------------------------------------------------------------------------------


;;--------------------------------------------------------------------------------------------------------------------------------------------
;; ---- BEGIN E2WM ---------------------------------------------------------------------------------------------------------------------------
;;--------------------------------------------------------------------------------------------------------------------------------------------

;(require 'e2wm-direx)

(setq e2wm:c-code-recipe
      '(| (:left-max-size 20)
          (- (:upper-size-ratio 0.6)
             files history)
          (- (:lower-max-size 150)
             (| (:right-max-size 20)
                main imenu)
             sub)))

;; (setq e2wm:c-code-winfo
;;       '((:name main)
;; 	(:name files   :plugin files)
;; 	(:name history :plugin history-list)
;; 	(:name imenu   :plugin imenu :default-hide nil)
;; 	(:name sub     :buffer "*info*" :default-hide t)))

;; (e2wm:pst-class-register
;;  (make-e2wm:$pst-class
;;   :name 'pcode
;;   :extend 'base
;;   :title "Coding"
;;   :init 'e2wm:dp-pcode-init
;;   :main 'main
;;   :switch 'e2wm:dp-code-switch
;;   :popup 'e2wm:dp-code-popup
;;   :after-bury 'e2wm:dp-code-after-bury
;;   :keymap 'e2wm:dp-code-minor-mode-map))

;; (defun e2wm:dp-pcode-init ()
;;   (let*
;;       ((code-wm
;; 	(wlf:no-layout
;; 	 e2wm:python-code-recipe
;; 	 e2wm:python-code-winfo))
;;        (buf (or e2wm:prev-selected-buffer
;; 		(e2wm:history-get-main-buffer))))
;;     (when (e2wm:history-recordable-p e2wm:prev-selected-buffer)
;;       (e2wm:history-add e2wm:prev-selected-buffer))
;;     (wlf:set-buffer code-wm 'main buf)
;;     code-wm))

;; (eval-after-load "e2wm:def-plugin-files-mode"
;; '(defvar e2wm:def-plugin-files-mode-map
;; (e2wm:define-keymap
;; '(
;; ("u" . e2wm:def-plugin-files-open-updir-command)
;; ))))

(add-hook 'e2wm:def-plugin-files-mode-hook
          (lambda () (local-set-key (kbd "u") 'e2wm:def-plugin-files-updir-command)))

;;--------------------------------------------------------------------------------------------------------------------------------------------
;; ---- END E2WM -----------------------------------------------------------------------------------------------------------------------------
;;--------------------------------------------------------------------------------------------------------------------------------------------


;;--------------------------------------------------------------------------------------------------------------------------------------------
;; ---- BEGIN ACE JUMP -----------------------------------------------------------------------------------------------------------------------
;;--------------------------------------------------------------------------------------------------------------------------------------------

(autoload
  'ace-jump-mode
  "ace-jump-mode"
  "Emacs quick move minor mode"
  t)
;; you can select the key you prefer to
(define-key global-map (kbd "C-. SPC") 'ace-jump-mode)



;;
;; enable a more powerful jump back function from ace jump mode
;;
(autoload
  'ace-jump-mode-pop-mark
  "ace-jump-mode"
  "Ace jump back:-)"
  t)
(eval-after-load "ace-jump-mode"
  '(ace-jump-mode-enable-mark-sync))
(define-key global-map (kbd "C-x SPC") 'ace-jump-mode-pop-mark)

;;--------------------------------------------------------------------------------------------------------------------------------------------
;; ---- END ACE JUMP -------------------------------------------------------------------------------------------------------------------------
;;--------------------------------------------------------------------------------------------------------------------------------------------


;;--------------------------------------------------------------------------------------------------------------------------------------------
;; ---- BEGIN SMART PAREN --------------------------------------------------------------------------------------------------------------------
;;--------------------------------------------------------------------------------------------------------------------------------------------

;; (require 'smartparens-config)
                                        ;(require 'smartparens-latex)
(smartparens-global-mode 1)
                                        ;(sp-local-pair 'LaTeX-mode "\\\\left(" "\\\\right)" :insert "C-, C-p" :trigger)
                                        ;(require 'smartparens-config)
                                        ;(sp-pair "(" ")" :wrap "C-(")
(sp-pair "'" nil :actions :rem)
(sp-with-modes '(
                 teX-mode
                 plain-tex-mode
                 latex-mode
                 )
  (sp-local-pair "\\[" "\\]" :actions '(insert wrap))
  (sp-local-pair "$" "$")
                                        ;  (sp-local-pair "\{" nil :actions :rem)
  (sp-local-pair "\\{" "\\}" :actions '(insert))
  )

(sp-with-modes '(python-mode)
  (sp-local-pair "(" ")" :actions '(insert wrap))
  (sp-local-pair "\"" "\"" :actions '(insert wrap))
  (sp-local-pair "'" "'" :actions '(insert wrap))
  )

(sp-with-modes '(sage-mode)
  (sp-local-pair "(" ")" :actions '(insert wrap))
  (sp-local-pair "\"" "\"" :actions '(insert wrap))
  (sp-local-pair "'" "'" :actions '(insert wrap))
  )

(sp-with-modes '(sage-shell-mode)
  (sp-local-pair "(" ")" :actions '(insert wrap))
  (sp-local-pair "\"" "\"" :actions '(insert wrap))
  (sp-local-pair "'" "'" :actions '(insert wrap))
  )

;;--------------------------------------------------------------------------------------------------------------------------------------------
;; ---- END SMART PAREN ----------------------------------------------------------------------------------------------------------------------
;;--------------------------------------------------------------------------------------------------------------------------------------------


(provide 'init-miscel)
